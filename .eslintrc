{
    "parser": "babel-eslint",
    "plugins": [
        "angular"
    ],
    extends: "angular",
    "env": {
        "browser": true,            // browser global variables.
        "node": false,              // Node.js global variables and Node.js-specific rules.
        "commonjs": true,           // CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack).
        "worker": false,            // web workers global variables.
        "amd": false,               // defines require() and define() as global variables as per the amd spec.
        "mocha": false,             // adds all of the Mocha testing global variables.
        "jasmine": false,           // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
        "jest": false,              // Jest global variables.
        "phantomjs": false,         // phantomjs global variables.
        "protractor": false,        // Protractor global variables.
        "qunit": false,             // QUnit global variables.
        "jquery": false,            // jquery global variables.
        "prototypejs": false,       // prototypejs global variables.
        "shelljs": false,           // shelljs global variables.
        "meteor": false,            // Meteor global variables.
        "mongo": false,             // MongoDB global variables.
        "applescript": false,       // AppleScript global variables.
        "nashorn": false,           // Java 8 Nashorn global variables.
        "serviceworker": false,     // Service Worker global variables.
        "embertest": false,         // Ember test helper globals.
        "webextensions": false,     // WebExtensions globals.
        "es6": false,               // enable all ECMAScript 6 features except for modules.
    },

    "ecmaFeatures": {
        "arrowFunctions": false,    // enable arrow functions
        "binaryLiterals": false,    // enable binary literals
        "blockBindings": false,     // enable let and const (aka block bindings)
        "classes": false,           // enable classes
        "defaultParams": false,     // enable default function parameters
        "destructuring": false,     // enable destructuring
        "forOf": false,             // enable for-of loops
        "generators": false,        // enable generators
        "modules": false,           // enable modules and global strict mode
        "objectLiteralComputedProperties": false,   // enable computed object literal property names
        "objectLiteralDuplicateProperties": false,  // enable duplicate object literal properties in strict mode
        "objectLiteralShorthandMethods": false,     // enable object literal shorthand methods
        "objectLiteralShorthandProperties": false,  // enable object literal shorthand properties
        "octalLiterals": false,     // enable octal literals
        "regexUFlag": false,        // enable the regular expression u flag
        "regexYFlag": false,        // enable the regular expression y flag
        "restParams": false,        // enable the rest parameters
        "spread": false,            // enable the spread operator for arrays
        "superInFunctions": false,  // enable super references inside of functions
        "templateStrings": false,   // enable template strings
        "unicodeCodePointEscapes": false,           // enable code point escapes
        "globalReturn": false,      // allow return statements in the global scope
        "jsx": true,                // enable JSX
        "experimentalObjectRestSpread": false    // enable support for the experimental object rest/spread properties
                                                // (IMPORTANT: This is an experimental feature that may change significantly in the future.
                                                // It's recommended that you do not write rules relying on this functionality unless you are
                                                // willing to incur maintenance cost when it changes.)
    },

    "rules": {
        "comma-dangle": [1, "never"],       // disallow trailing commas in object literals
        "no-cond-assign": 1,                // disallow assignment in conditional expressions
        "no-console": 1,                    // disallow use of console (off by default in the node environment)
        "no-constant-condition": 1,         // disallow use of constant expressions in conditions
        "no-control-regex": 1,              // disallow control characters in regular expressions
        "no-debugger": 2,                   // disallow use of debugger
        "no-dupe-args": 2,
        "no-dupe-keys": 1,                  // disallow duplicate keys when creating object literals
        "no-duplicate-case": 1,
        "no-empty-character-class": 1,
        "no-empty": 1,                      // disallow empty statements
        "no-ex-assign": 1,                  // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast": 1,         // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": 0,               // disallow unnecessary parentheses (off by default)
        "no-extra-semi": 1,                 // disallow unnecessary semicolons
        "no-func-assign": 1,                // disallow overwriting functions written as function declarations
        "no-inner-declarations": 1,         // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": 2,             // disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": 1,       // disallow irregular whitespace outside of strings and comments
        "no-negated-in-lhs": 1,             // disallow negation of the left operand of an in expression
        "no-obj-calls": 1,                  // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces": 1,               // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays": 1,              // disallow sparse arrays
        "no-unreachable": 2,                // disallow unreachable statements after a return, throw, continue, or break statement
        "use-isnan": 2,                     // disallow comparisons with the value NaN
        "valid-jsdoc": 1,                   // Ensure JSDoc comments are valid (off by default)
        "valid-typeof": 2,                  // Ensure that the results of typeof are compared against a valid string


        ////////// Best Practices //////////

        "accessor-pairs": 1,
        "block-scoped-var": 1,      // treat var statements as if they were block scoped (off by default)
        "complexity": 0,            // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "consistent-return": 0,     // require return statements to either always or never specify values
        "curly": 1,                 // specify curly brace conventions for all control statements
        "default-case": 0,          // require default case in switch statements (off by default)
        "dot-location": [1, "property"],
        "dot-notation": 1,          // encourages use of dot notation whenever possible
        "eqeqeq": 1,                // require the use of === and !==
        "guard-for-in": 1,          // make sure for-in loops have an if statement (off by default)
        "no-alert": 1,              // disallow the use of alert, confirm, and prompt
        "no-caller": 1,             // disallow use of arguments.caller or arguments.callee
        "no-case-declarations": 0,
        "no-div-regex": 1,          // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-else-return": 0,        // disallow else after a return in an if (off by default)
        "no-empty-label": 1,        // disallow use of labels for anything other then loops and switches
        "no-empty-pattern": 1,
        "no-eq-null": 0,            // disallow comparisons to null without a type-checking operator (off by default)
        "no-eval": 1,               // disallow use of eval()
        "no-extend-native": 2,      // disallow adding to native types
        "no-extra-bind": 2,         // disallow unnecessary function binding
        "no-fallthrough": 0,        // disallow fallthrough of case statements
        "no-floating-decimal": 1,   // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-implied-eval": 1,       // disallow use of eval()-like methods
        "no-invalid-this": 1,
        "no-iterator": 1,           // disallow usage of __iterator__ property
        "no-labels": 1,             // disallow use of labeled statements
        "no-lone-blocks": 1,        // disallow unnecessary nested blocks
        "no-loop-func": 1,          // disallow creation of functions within loops
        "no-magic-numbers": 0,
        "no-multi-spaces": 1,       // disallow use of multiple spaces
        "no-multi-str": 1,          // disallow use of multiline strings
        "no-native-reassign": 2,    // disallow reassignments of native objects
        "no-new-func": 2,           // disallow use of new operator for Function object
        "no-new-wrappers": 1,       // disallows creating new instances of String, Number, and Boolean
        "no-new": 1,                // disallow use of new operator when not part of the assignment or comparison
        "no-octal-escape": 1,       // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-octal": 1,              // disallow use of octal literals
        "no-param-reassign": 0,
        "no-process-env": 0,        // disallow use of process.env (off by default)
        "no-proto": 1,              // disallow usage of __proto__ property
        "no-redeclare": 1,          // disallow declaring the same variable more then once
        "no-return-assign": 1,      // disallow use of assignment in return statement
        "no-script-url": 2,         // disallow use of javascript: urls.
        "no-self-compare": 1,       // disallow comparisons where both sides are exactly the same (off by default)
        "no-sequences": 1,          // disallow use of comma operator
        "no-throw-literal": 1,
        "no-unused-expressions": 1, // disallow usage of expressions in statement position
        "no-useless-call": 1,
        "no-useless-concat": 1,
        "no-void": 1,               // disallow use of void operator (off by default)
        "no-warning-comments": 0,   // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
        "no-with": 1,               // disallow use of the with statement
        "radix": 1,                 // require use of the second argument for parseInt() (off by default)
        "vars-on-top": 0,           // requires to declare all vars on top of their containing scope (off by default)
        "wrap-iife": 0,             // require immediate function invocation to be wrapped in parentheses (off by default)
        "yoda": 0,                  // require or disallow Yoda conditions


        ////////// Strict Mode //////////
        "strict": [1, "global"],          // controls location of Use Strict Directives


        ////////// Variables //////////
        "init-declarations": 0,
        "no-catch-shadow": 1,             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-delete-var": 0,               // disallow deletion of variables
        "no-label-var": 1,                // disallow labels that share a name with a variable
        "no-shadow-restricted-names": 1,  // disallow shadowing of names such as arguments
        "no-shadow": 1,                   // disallow declaration of variables already declared in the outer scope
        "no-undef-init": 1,               // disallow use of undefined when initializing variables
        "no-undef": 1,                    // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undefined": 0,                // disallow use of undefined variable (off by default)
        "no-unused-vars": 1,              // disallow declaration of variables that are not used in the code
        "no-use-before-define": 1,        // disallow use of variables before they are defined


        ////////// Node.js //////////
        "callback-return": 1,
        "global-require": 1,
        "handle-callback-err": 1,   // enforces error handling in callbacks (off by default) (on by default in the node environment)
        "no-mixed-requires": 0,     // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
        "no-new-require": 0,        // disallow use of new operator with the require function (off by default) (on by default in the node environment)
        "no-path-concat": 0,        // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
        "no-process-exit": 0,       // disallow process.exit() (on by default in the node environment)
        "no-restricted-modules": 0, // restrict usage of specified node modules (off by default)
        "no-sync": 0,               // disallow use of synchronous methods (off by default)


        ////////// Stylistic Issues //////////
        "array-bracket-spacing": 1,
        "block-spacing": 1,
        "brace-style": 1,               // enforce one true brace style (off by default)
        "camelcase": 1,                 // require camel case names
        "comma-spacing": [1, {"before": false, "after": true}], // enforce spacing before and after comma
        "comma-style": 1,               // enforce one true comma style (off by default)
        "computed-property-spacing": 1,
        "consistent-this": 0,           // enforces consistent naming when capturing the current execution context (off by default)
        "eol-last": 1,                  // enforce newline at the end of file, with no multiple empty lines
        "func-names": 0,                // require function expressions to have a name (off by default)
        "func-style": 0,                // enforces use of function declarations or expressions (off by default)
        "id-length": 0,
        "id-match": 0,
        "indent": 1,
        "jsx-quotes": 0,
        "key-spacing": 1,               // enforces spacing between keys and values in object literal properties
        "linebreak-style": 0,
        "lines-around-comment": 0,
        "max-depth": 0,
        "max-len": 0,
        "max-nested-callbacks": 0,      // specify the maximum depth callbacks can be nested (off by default)
        "max-params": 0,
        "max-statements": 0,
        "new-cap": 1,                   // require a capital letter for constructors
        "new-parens": 1,                // disallow the omission of parentheses when invoking a constructor with no arguments
        "newline-after-var": 0,
        "no-array-constructor": 1,      // disallow use of the Array constructor
        "no-bitwise": 1,
        "no-continue": 0,
        "no-inline-comments": 0,        // disallow comments inline after code (off by default)
        "no-lonely-if": 1,              // disallow if as the only statement in an else block (off by default)
        "no-mixed-spaces-and-tabs": 1,  // disallow mixed spaces and tabs for indentation
        "no-multiple-empty-lines": 1,   // disallow multiple empty lines (off by default)
        "no-negated-condition": 0,
        "no-nested-ternary": 0,         // disallow nested ternary expressions (off by default)
        "no-new-object": 1,             // disallow use of the Object constructor
        "no-plusplus": 0,
        "no-restricted-syntax": 0,
        "no-spaced-func": 1,            // disallow space between function identifier and application
        "no-ternary": 0,                // disallow the use of ternary operators (off by default)
        "no-trailing-spaces": 1,        // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": 1,      // disallow dangling underscores in identifiers
        "no-unneeded-ternary": 1,
        "object-curly-spacing": [1, "always", {
            "objectsInObjects": false,
            "arraysInObjects": false
        }],
        "one-var": [1, "never"],        // allow just one var statement per function (off by default)
        "operator-assignment": 0,       // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "operator-linebreak": 1,
        "padded-blocks": [1, "never"],  // enforce padding within blocks (off by default)
        "quote-props": [1, "as-needed"], // require quotes around object literal property names (off by default)
        "quotes": 0,                    // specify whether double or single quotes should be used
        "require-jsdoc": 0,
        "semi-spacing": 1,
        "semi": 1,                      // require or disallow use of semicolons instead of ASI
        "sort-vars": 0,                 // sort variables within the same declaration block (off by default)
        "space-after-keywords": [1, 'never'], // require a space after certain keywords (off by default)
        "space-before-blocks": 1,       // require or disallow space before blocks (off by default)
        "space-before-function-paren": [1, 'never'],
        "space-before-keywords": [2, "always"],
        "space-in-parens": [1, "never"],           // require or disallow spaces inside parentheses (off by default)
        "space-infix-ops": 1,           // require spaces around operators
        "space-return-throw-case": 1,   // require a space after return, throw, and case
        "space-unary-ops": [1, { "words": true, "nonwords": false }],
        "spaced-line-comment": 0,       // require or disallow a space immediately following the // in a line comment (off by default)
        "wrap-regex": 1,                // require regex literals to be wrapped in parentheses (off by default)
    }
}